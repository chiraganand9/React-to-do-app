{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","console","log","newItems","filteredItems","filter","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6UAsCeA,MAjCf,SAAmBC,GACjB,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GAC1B,OACE,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC9B,2BACE,2BACEC,KAAK,OACLC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SAAU,SAAAC,GACRZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAOL,EAAKE,QAGzC,8BACE,kBAAC,IAAD,CACED,UAAU,UACVU,KAAK,QACLC,QAAS,kBAAMhB,EAAMiB,WAAWb,EAAKE,cAOjD,OACA,6BACE,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC7BlB,K,eC3BPmB,IAAQC,IAAIC,K,IAsFGC,E,YAnFb,WAAYvB,GAAQ,IAAD,8BACjB,4CAAMA,KACDwB,MAAQ,CACXtB,MAAO,GACPuB,YAAa,CACXf,KAAM,GACNJ,IAAK,KAGT,EAAKoB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKV,WAAa,EAAKA,WAAWU,KAAhB,gBAClB,EAAKd,UAAY,EAAKA,UAAUc,KAAf,gBAZA,E,yEAePf,GACViB,KAAKC,SAAS,CACZL,YAAa,CACXf,KAAME,EAAEE,OAAOL,MACfH,IAAKyB,KAAKC,W,8BAKRpB,GACNA,EAAEqB,iBACF,IAAMC,EAAUL,KAAKL,MAAMC,YAE3B,GADAU,QAAQC,IAAIF,GACS,KAAjBA,EAAQxB,KAAa,CACvB,IAAM2B,EAAQ,sBAAOR,KAAKL,MAAMtB,OAAlB,CAAyBgC,IACvCL,KAAKC,SAAS,CACZ5B,MAAOmC,EACPZ,YAAa,CACXf,KAAM,GACNJ,IAAK,S,iCAMFA,GACT,IAAMgC,EAAgBT,KAAKL,MAAMtB,MAAMqC,QAAO,SAAAnC,GAAI,OAAIA,EAAKE,MAAQA,KACnEuB,KAAKC,SAAS,CACZ5B,MAAOoC,M,gCAID5B,EAAMJ,GACd,IAAMJ,EAAQ2B,KAAKL,MAAMtB,MACzBA,EAAMC,KAAI,SAAAC,GACR,GAAIA,EAAKE,MAAQA,EACf,OAAOF,EAAKM,KAAOA,KAGvBmB,KAAKC,SAAS,CACZ5B,MAAOA,M,+BAKT,OACE,yBAAKG,UAAU,OACb,gCACE,0BAAMG,GAAG,aAAagC,SAAUX,KAAKD,SACnC,2BACErB,KAAK,OACLkC,YAAY,eACZhC,MAAOoB,KAAKL,MAAMC,YAAYf,KAC9BC,SAAUkB,KAAKH,cAEjB,4BAAQnB,KAAK,UAAb,SAGJ,kBAAC,EAAD,CACEL,MAAO2B,KAAKL,MAAMtB,MAClBe,WAAYY,KAAKZ,WACjBJ,UAAWgB,KAAKhB,iB,GA7ER6B,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d9922c13.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ListItems.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport FlipMove from \"react-flip-move\";\r\n\r\nfunction ListItems(props) {\r\n  const items = props.items;\r\n  const listItems = items.map(item => {\r\n    return (\r\n      <div className=\"list\" key={item.key}>\r\n        <p>\r\n          <input\r\n            type=\"text\"\r\n            id={item.key}\r\n            value={item.text}\r\n            onChange={e => {\r\n              props.setUpdate(e.target.value, item.key);\r\n            }}\r\n          />\r\n          <span>\r\n            <FontAwesomeIcon\r\n              className=\"faicons\"\r\n              icon=\"trash\"\r\n              onClick={() => props.deleteItem(item.key)}\r\n            />\r\n          </span>\r\n        </p>\r\n      </div>\r\n    );\r\n  });\r\n  return(\r\n  <div>\r\n    <FlipMove duration={300} easing=\"ease-in-out\">\r\n      {listItems}\r\n    </FlipMove>\r\n  </div>);\r\n}\r\n\r\nexport default ListItems;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport ListItems from \"./ListItems.js\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nlibrary.add(faTrash);\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      currentItem: {\r\n        text: \"\",\r\n        key: \"\"\r\n      }\r\n    }\r\n    this.handleInput = this.handleInput.bind(this);\r\n    this.addItem = this.addItem.bind(this);\r\n    this.deleteItem = this.deleteItem.bind(this);\r\n    this.setUpdate = this.setUpdate.bind(this);\r\n  }\r\n\r\n  handleInput(e) {\r\n    this.setState({\r\n      currentItem: {\r\n        text: e.target.value,\r\n        key: Date.now()\r\n      }\r\n    })\r\n  }\r\n\r\n  addItem(e) {\r\n    e.preventDefault();\r\n    const newItem = this.state.currentItem;\r\n    console.log(newItem);\r\n    if (newItem.text !== \"\") {\r\n      const newItems = [...this.state.items, newItem];\r\n      this.setState({\r\n        items: newItems,\r\n        currentItem: {\r\n          text: \"\",\r\n          key: \"\"\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  deleteItem(key) {\r\n    const filteredItems = this.state.items.filter(item => item.key !== key);\r\n    this.setState({\r\n      items: filteredItems\r\n    })\r\n  }\r\n\r\n  setUpdate(text, key) {\r\n    const items = this.state.items;// eslint-disable-next-line\r\n    items.map(item => {\r\n      if (item.key === key) {\r\n        return item.text = text;\r\n      }\r\n    })\r\n    this.setState({\r\n      items: items\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header>\r\n          <form id=\"to-do-form\" onSubmit={this.addItem}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Things to-do\"\r\n              value={this.state.currentItem.text}\r\n              onChange={this.handleInput}\r\n            />\r\n            <button type=\"submit\">Add</button>\r\n          </form>\r\n        </header>\r\n        <ListItems\r\n          items={this.state.items}\r\n          deleteItem={this.deleteItem}\r\n          setUpdate={this.setUpdate}\r\n        ></ListItems>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}